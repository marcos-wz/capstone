// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	basepb "github.com/marcos-wz/capstone/proto/basepb"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// FruitRepo is an autogenerated mock type for the FruitRepo type
type FruitRepo struct {
	mock.Mock
}

// FetchFruits provides a mock function with given fields:
func (_m *FruitRepo) FetchFruits() ([]*basepb.Fruit, error) {
	ret := _m.Called()

	var r0 []*basepb.Fruit
	if rf, ok := ret.Get(0).(func() []*basepb.Fruit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*basepb.Fruit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadFruits provides a mock function with given fields:
func (_m *FruitRepo) ReadFruits() ([]*basepb.Fruit, error) {
	ret := _m.Called()

	var r0 []*basepb.Fruit
	if rf, ok := ret.Get(0).(func() []*basepb.Fruit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*basepb.Fruit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteFruits provides a mock function with given fields: fruits
func (_m *FruitRepo) WriteFruits(fruits []*basepb.Fruit) error {
	ret := _m.Called(fruits)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*basepb.Fruit) error); ok {
		r0 = rf(fruits)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFruitRepo creates a new instance of FruitRepo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewFruitRepo(t testing.TB) *FruitRepo {
	mock := &FruitRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
