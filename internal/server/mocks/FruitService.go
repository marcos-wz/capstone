// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	basepb "github.com/marcos-wz/capstone/proto/basepb"
	filterpb "github.com/marcos-wz/capstone/proto/filterpb"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// FruitService is an autogenerated mock type for the FruitService type
type FruitService struct {
	mock.Mock
}

// GetFilteredFruits provides a mock function with given fields: filter
func (_m *FruitService) GetFilteredFruits(filter *filterpb.FilterRequest) ([]*basepb.Fruit, error) {
	ret := _m.Called(filter)

	var r0 []*basepb.Fruit
	if rf, ok := ret.Get(0).(func(*filterpb.FilterRequest) []*basepb.Fruit); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*basepb.Fruit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*filterpb.FilterRequest) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFruitService creates a new instance of FruitService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewFruitService(t testing.TB) *FruitService {
	mock := &FruitService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
