// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fruitpb

import (
	context "context"
	filterccpb "github.com/marcos-wz/capstone/proto/filterccpb"
	filterpb "github.com/marcos-wz/capstone/proto/filterpb"
	loaderpb "github.com/marcos-wz/capstone/proto/loaderpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FruitServiceClient is the client API for FruitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FruitServiceClient interface {
	Filter(ctx context.Context, in *filterpb.FilterRequest, opts ...grpc.CallOption) (*filterpb.FilterResponse, error)
	Loader(ctx context.Context, in *loaderpb.LoaderRequest, opts ...grpc.CallOption) (*loaderpb.LoaderResponse, error)
	FilterCC(ctx context.Context, in *filterccpb.FilterCCRequest, opts ...grpc.CallOption) (*filterccpb.FilterCCResponse, error)
}

type fruitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFruitServiceClient(cc grpc.ClientConnInterface) FruitServiceClient {
	return &fruitServiceClient{cc}
}

func (c *fruitServiceClient) Filter(ctx context.Context, in *filterpb.FilterRequest, opts ...grpc.CallOption) (*filterpb.FilterResponse, error) {
	out := new(filterpb.FilterResponse)
	err := c.cc.Invoke(ctx, "/capstone.FruitService/Filter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fruitServiceClient) Loader(ctx context.Context, in *loaderpb.LoaderRequest, opts ...grpc.CallOption) (*loaderpb.LoaderResponse, error) {
	out := new(loaderpb.LoaderResponse)
	err := c.cc.Invoke(ctx, "/capstone.FruitService/Loader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fruitServiceClient) FilterCC(ctx context.Context, in *filterccpb.FilterCCRequest, opts ...grpc.CallOption) (*filterccpb.FilterCCResponse, error) {
	out := new(filterccpb.FilterCCResponse)
	err := c.cc.Invoke(ctx, "/capstone.FruitService/FilterCC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FruitServiceServer is the server API for FruitService service.
// All implementations must embed UnimplementedFruitServiceServer
// for forward compatibility
type FruitServiceServer interface {
	Filter(context.Context, *filterpb.FilterRequest) (*filterpb.FilterResponse, error)
	Loader(context.Context, *loaderpb.LoaderRequest) (*loaderpb.LoaderResponse, error)
	FilterCC(context.Context, *filterccpb.FilterCCRequest) (*filterccpb.FilterCCResponse, error)
	mustEmbedUnimplementedFruitServiceServer()
}

// UnimplementedFruitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFruitServiceServer struct {
}

func (UnimplementedFruitServiceServer) Filter(context.Context, *filterpb.FilterRequest) (*filterpb.FilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Filter not implemented")
}
func (UnimplementedFruitServiceServer) Loader(context.Context, *loaderpb.LoaderRequest) (*loaderpb.LoaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Loader not implemented")
}
func (UnimplementedFruitServiceServer) FilterCC(context.Context, *filterccpb.FilterCCRequest) (*filterccpb.FilterCCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterCC not implemented")
}
func (UnimplementedFruitServiceServer) mustEmbedUnimplementedFruitServiceServer() {}

// UnsafeFruitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FruitServiceServer will
// result in compilation errors.
type UnsafeFruitServiceServer interface {
	mustEmbedUnimplementedFruitServiceServer()
}

func RegisterFruitServiceServer(s grpc.ServiceRegistrar, srv FruitServiceServer) {
	s.RegisterService(&FruitService_ServiceDesc, srv)
}

func _FruitService_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(filterpb.FilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FruitServiceServer).Filter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/capstone.FruitService/Filter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FruitServiceServer).Filter(ctx, req.(*filterpb.FilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FruitService_Loader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loaderpb.LoaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FruitServiceServer).Loader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/capstone.FruitService/Loader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FruitServiceServer).Loader(ctx, req.(*loaderpb.LoaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FruitService_FilterCC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(filterccpb.FilterCCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FruitServiceServer).FilterCC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/capstone.FruitService/FilterCC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FruitServiceServer).FilterCC(ctx, req.(*filterccpb.FilterCCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FruitService_ServiceDesc is the grpc.ServiceDesc for FruitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FruitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "capstone.FruitService",
	HandlerType: (*FruitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Filter",
			Handler:    _FruitService_Filter_Handler,
		},
		{
			MethodName: "Loader",
			Handler:    _FruitService_Loader_Handler,
		},
		{
			MethodName: "FilterCC",
			Handler:    _FruitService_FilterCC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fruit.proto",
}
